Index: websocket/backend.py
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import pandas as pd\n\nclass IOT_Server:\n    devices = None\n    rules = None\n\n    def __init__(self):\n        # replace this with something that reads a json file listing the devices\n        self.devices = {}  # key:value pairs of the form id:device\n        self.rules = []\n\n    def process_message(self, message):\n        '''\n        :param message: dictionary received from a client device\n        :return:\n        '''\n        # Check ID of device that wrote in. Create the device is it's unkown\n        print('hello')\n        if message['id'] in self.devices:\n            dev = self.devices[message['id']]\n        else:\n            dev = globals()[message['ancestors'][0]](message['id'])\n            self.devices[message['id']] = dev\n\n        dev.add_data(message['data'])\n\n        response = {}  # Store default respons value here (e.g. {'success':True})\n\n        # If the device is an actuator, tell it what it should do\n        if type(dev) is Actuator:\n            for job_name, job_value in dev.jobs():\n                response['job_name'] = job_value\n\n        return response\n\n    # check whether this triggers any rules (in a thread)\n\n    def describe_all_devices(self):\n        ids = [dev for dev in self.devices]\n        types = [type(self.devices[dev]).__name__ for dev in self.devices]\n        device_table = {'ID': ids, 'Type': types}\n        return device_table\n        # devices_string = '\\n\\n'.join([dev.describe_device() for dev in self.devices.values()])\n        # return devices_string if devices_string else 'None'\n\n\nclass IOT_Device():\n    id = None\n    data = None\n\n    def __init__(self, id):\n        self.id = id\n\n    def add_data(self, data):\n        if self.data is None:\n            self.data = pd.DataFrame(data, index=[0])\n        else:\n            self.data = self.data.append(data, ignore_index=True)\n\n    def describe_device(self):\n        data_string = '        \\n'.join(['{}:{}'.format(key, value) for key, value in self.data.items()])\n        out = ('Device name: {name}\\n'\n               '  data: {data}').format(name=self.id,\n                                        data=data_string)\n        return out\n\n\nclass Sensor(IOT_Device):\n    pass\n\n\nclass Actuator(IOT_Device):\n    jobs = None\n\n    def __init__(self, id, data_names):\n        super().__init__(id, data_names)\n        self.jobs = {}\n\n    def describe_device(self):\n        data_string = '        \\n'.join(['{}:{}'.format(key, value) for key, value in self.data.items()])\n        jobs_string = '        \\n'.join(['{}:{}'.format(key, value) for key, value in self.jobs.items()])\n        out = ('Device name: {name}\\n'\n               '  data: {data}\\n'\n               '  jobs: {jobs}').format(name=self.id,\n                                        data=data_string,\n                                        jobs=jobs_string)\n        return out\n\n\nif __name__ == '__main__':\n    environmental_sensor = Sensor('temp_sensor_1', ['temperature', 'humidity'])\n    door_positioner = Actuator('door_positioner_1', ['door_position'])\n\n    iot_server = IOT_Server()\n    iot_server.devices = {environmental_sensor.id: environmental_sensor,\n                          door_positioner.id: door_positioner}\n\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- websocket/backend.py	(revision 374b7ce3eedd7e438d75b9db9aaa81a09e981269)
+++ websocket/backend.py	(date 1604771345177)
@@ -56,6 +56,7 @@
             self.data = pd.DataFrame(data, index=[0])
         else:
             self.data = self.data.append(data, ignore_index=True)
+        print(self.data)
 
     def describe_device(self):
         data_string = '        \n'.join(['{}:{}'.format(key, value) for key, value in self.data.items()])
